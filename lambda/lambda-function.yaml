AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function for serverless backend logic

Parameters:
  LambdaFunctionName:
    Type: String
  LambdaRuntime:
    Type: String
  LambdaHandler:
    Type: String
  LambdaTimeout:
    Type: Number
  TableName:
    Type: String
  LambdaExecutionRoleArn:
    Type: String
  HttpApiId:
    Type: String

Resources:
  AppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: !Ref LambdaRuntime
      Handler: !Ref LambdaHandler
      Timeout: !Ref LambdaTimeout
      Role: !Ref LambdaExecutionRoleArn

      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB();

          exports.handler = async (event) => {
            const tableName = process.env.TABLE_NAME;
            const itemId = "id-" + Date.now();

            const item = {
              id: { S: itemId },
              createdAt: { S: new Date().toISOString() }
            };

            try {
              await dynamodb.putItem({
                TableName: tableName,
                Item: item
              }).promise();

              return {
                statusCode: 200,
                headers: {
                  "Access-Control-Allow-Origin": "*",
                  "Access-Control-Allow-Headers": "*"
                },
                body: JSON.stringify({
                  message: "Item successfully written to DynamoDB!",
                  id: itemId,
                  table: tableName
                })
              };
            } catch (err) {
              console.error("DynamoDB error:", err);
              return {
                statusCode: 500,
                headers: {
                  "Access-Control-Allow-Origin": "*",
                  "Access-Control-Allow-Headers": "*"
                },
                body: JSON.stringify({ error: "Failed to write to DynamoDB." })
              };
            }
          };

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AppLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApiId}/*

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt AppLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"






